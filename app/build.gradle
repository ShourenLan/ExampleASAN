apply plugin: 'com.android.application'

def abiFiltersForWrapScript = []
def SupportedABIs = ['armeabi-v7a']

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.gpxblog.exampleasan"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters.addAll( SupportedABIs )
            }
        }
    }
    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
                    if (rootProject.ext.useASAN)
                        arguments "-DUSEASAN=ON"
                }
            }
            packagingOptions {
                doNotStrip "**.so"
                if (rootProject.ext.useASAN && abiFiltersForWrapScript) {
                    def exclude_abis = ["armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64", "mips", "mips64"]
                            .findAll { !(it in abiFiltersForWrapScript) }
                            .collect { "**/" + it + "/wrap.sh" }
                    excludes += exclude_abis
                }
            }

            if (rootProject.ext.useASAN) {
                sourceSets {
                    main {
                        jniLibs {
                            srcDir {
                                "wrap_add_dir/libs"
                            }
                        }
                        resources {
                            srcDir {
                                "wrap_add_dir/res"
                            }
                        }
                    }
                }
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    splits {
        abi {
            enable true
            reset()
            include SupportedABIs.join(", ")
            universalApk false
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.0-alpha1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('generate')) {
        if(rootProject.ext.useASAN)
            task.dependsOn createWrapScriptAddDir
    }
}

task deleteASAN(type: Delete) {
    delete 'wrap_add_dir'
}

clean.dependsOn(deleteASAN)

task setEnforceOff() {
    doLast {
        def sdkDir = file("$rootProject.ext.ndkDir").getParentFile().absolutePath
        def process = ("$sdkDir/platform-tools/adb shell su -c \"setenforce 0\"").execute()
        process.waitFor()
        if (process.exitValue()) {
            println("stdout: " + process.in.text)
            println("stderr: " + process.err.text)
            throw new GradleException("error in set enforce command")
        }
    }
}

task setEnforceOn() {
    doLast {
        def sdkDir = file("$rootProject.ext.ndkDir").getParentFile().absolutePath
        def process = ("$sdkDir/platform-tools/adb shell su -c \"setenforce 1\"").execute()
        process.waitFor()
        if (process.exitValue() != 0) {
            println("stdout: " + process.in.text)
            println("stderr: " + process.err.text)
            throw new GradleException("error in set enforce command")
        }
    }
}

static def writeWrapScriptToFullyCompileJavaApp(wrapFile, abi) {
    if(abi == "armeabi" || abi == "armeabi-v7a")
        abi = "arm"
    if(abi == "arm64-v8a")
        abi = "aarch64"
    wrapFile.withWriter { writer ->
        writer.write('#!/system/bin/sh\n')
        writer.write('HERE="$(cd "$(dirname "$0")" && pwd)"\n')
        writer.write('export ASAN_OPTIONS=log_to_syslog=false,allow_user_segv_handler=1\n')
        writer.write('export ASAN_ACTIVATION_OPTIONS=include_if_exists=/data/local/tmp/asan.options.b\n')
        writer.write("export LD_PRELOAD=\$HERE/libclang_rt.asan-${abi}-android.so\n")
        writer.write('\$@\n')
    }
}

task copyASANLibs(type:Copy) {
    def libDir = file("$rootProject.ext.ndkDir").absolutePath + "/toolchains/llvm/prebuilt/"
    for (String abi : SupportedABIs) {
        def dir = new File("app/wrap_add_dir/libs/" + abi)
        dir.mkdirs()
        if(abi == 'armeabi-v7a' || abi == 'armeabi')
            abi = "arm"
        if(abi == "arm64-v8a")
            abi = "aarch64"
        FileTree tree = fileTree(dir: libDir).include("**/*asan*${abi}*.so")
        tree.each { File file ->
            from file
            into dir.absolutePath
        }
    }
}
task createWrapScriptAddDir(dependsOn: copyASANLibs) {
    for (String abi : SupportedABIs) {
        def dir = new File("app/wrap_add_dir/res/" + abi)
        dir.mkdirs()
        def wrapFile = new File(dir, "wrap.sh")
        writeWrapScriptToFullyCompileJavaApp(wrapFile, abi)
        println "write file " + wrapFile.path
    }
}